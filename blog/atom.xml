<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.dataguru.fr/blog</id>
    <title>Data Guru Blog</title>
    <updated>2023-02-18T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.dataguru.fr/blog"/>
    <subtitle>Data Guru Blog</subtitle>
    <icon>https://www.dataguru.fr/img/logo.png</icon>
    <entry>
        <title type="html"><![CDATA[Loi de Conway]]></title>
        <id>/2023/16/02/loi-de-conway</id>
        <link href="https://www.dataguru.fr/blog/2023/16/02/loi-de-conway"/>
        <updated>2023-02-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[En 1968, Melvin Conway a publié un article intitulé "How Do Committees Invent ?"  [1]  dans lequel il examine la relation entre la structure d'une organisation et la conception d'un système. Il est devenu célèbre pour avoir formulé ce qui est maintenant connu sous le nom de loi de Conway :]]></summary>
        <content type="html"><![CDATA[<p>En 1968, Melvin Conway a publié un article intitulé <strong>"How Do Committees Invent ?"</strong>  <a href="https://www.melconway.com/Home/Committees_Paper.html" target="_blank" rel="noopener noreferrer">[1]</a>  dans lequel il examine la relation entre la structure d'une organisation et la conception d'un système. Il est devenu célèbre pour avoir formulé ce qui est maintenant connu sous le nom de <strong>loi de Conway</strong> :</p><blockquote><p> <strong>Toute organisation qui conçoit un système, au sens large, concevra une structure qui sera la copie de la structure de communication de l’organisation.</strong></p></blockquote><p><img loading="lazy" alt="img.png" src="/assets/images/conway-311ebc5f15ff313c8915ea790dc5ebb8.png" width="1208" height="626"></p><p><strong>Conway's Law</strong> Martin Fowler <a href="https://martinfowler.com/bliki/ConwaysLaw.html" target="_blank" rel="noopener noreferrer">[2]</a></p><p>Pendant la conception d'un système, son architecture a de fortes chances de ressembler à l’organisation de l'équipe qui l'a conçue.
Si l'on considère trois équipes travaillant sur le développement d'une même solution, il est fort probable que la base de code soit divisée en trois sous-parties distinctes.</p><p>Alan MacCormack, John Rusnak, et Carliss Baldwin essaient de prouver cette corrélation dans leur recherche intitulée
<strong> Exploring the Structure of Complex Software Designs: An Empirical Study of Open Source and Proprietary Code</strong> <a href="https://www.researchgate.net/publication/220534289_Exploring_the_Structure_of_Complex_Software_Designs_An_Empirical_Study_of_Open_Source_and_Proprietary_Code" target="_blank" rel="noopener noreferrer">[3]</a>.</p><p>En utilisant le <strong>DSM (Design Structure Matrix)</strong> <a href="https://www.idp-innovation.com/design-structure-matrix-dsm-modeliser-la-complexite-en-developpement-de-produits/" target="_blank" rel="noopener noreferrer">[4]</a>
, un outil qui vise à modéliser la complexité d'un système en examinant ses dépendances.</p><p><strong>Exemple d’un matrice DSM</strong></p><p><img loading="lazy" alt="img.png" src="/assets/images/dsm-e18965daf202cfcb555b09099c54bd66.png" width="612" height="542"></p><p>Ils analysent la base de code de <code>Linux</code> et <code>Mozilla</code> et obtienne les résultats suivants :</p><ul><li><p>Le projet Linux, qui est un projet <strong>open source</strong> conçu pour la collaboration <strong>décentralisée</strong> entre des personnes du monde entier, a une <strong>architecture modulaire</strong>.</p></li><li><p>Le navigateur Netscape, avant son passage en open source sous le nom de Mozilla et qui était géré de <strong>manière propriétaire</strong> par une équipe interne, avait une <strong>architecture fortement couplée</strong>.</p></li><li><p>Après son passage en open source, Mozilla a subi une refactorisation globale pour devenir plus modulaire et moins couplé que Linux !</p></li></ul><p>Leur étude met en lumière l'influence de l'organisation des équipes sur la modularité du code. La collaboration distribuée inhérente à l'open source encourage la conception d'une architecture de code plus modulaire, avec une faible interdépendance entre les différents éléments.</p><p>Il est crucial de considérer la structure de l'équipe lors de la conception d'une architecture. Ignorer la structure organisationnelle peut mener à des divergences significatives par rapport au design initial.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="conway-inversé">Conway inversé<a class="hash-link" href="#conway-inversé" title="Lien direct vers le titre">​</a></h2><p>Dans son talk "Microservices and the Inverse Conway Manoeuvre", James Lewis présente une approche appelée  "Conway inversé"  qui consiste à organiser l'équipe de manière à atteindre l'architecture désirée.</p><div><iframe width="100%" height="400" src="https://www.youtube.com/embed/CsZDGlz7O5w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe></div><hr><p>Une technique largement employée par les <strong>entreprises performantes</strong> actuelles, qui augmente les chances de développer des <strong>solutions efficaces</strong> et maintenables de manière naturelle.</p><p>Pour créer une architecture modulaire composée de plusieurs domaines distincts, il est préférable de former une équipe pour chaque domaine spécifique. Cela permettra de progresser naturellement vers l'objectif final envisagé.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Lien direct vers le titre">​</a></h2><p>De nombreuses organisations continuent de rencontrer des difficultés pour mettre en place des architectures innovantes, souvent pour de mauvaises raisons.</p><p>En effet, travailler sur le cloud tout en conservant une organisation cloisonnée ne va pas forcément vous aider à réduire votre lead time.</p><p>La loi de Conway nous rappelle une vérité simple: si la structure de l'organisation ne correspond pas à l'architecture souhaitée, l'adoption des dernières tendances technologiques ne suffira pour atteindre les résultats escomptés.</p><p>Et comme le dit si bien  <strong>Ryth Malan</strong> :</p><blockquote><p>Si l'architecture du système et l'architecture de l'organisation sont en désaccord, l'architecture de l'organisation l'emporte.</p></blockquote>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Terraform - Concept & Workflow]]></title>
        <id>/2022/11/01/terraform-concepts-et-workflow</id>
        <link href="https://www.dataguru.fr/blog/2022/11/01/terraform-concepts-et-workflow"/>
        <updated>2022-11-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Objectifs :]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="objectifs-">Objectifs :<a class="hash-link" href="#objectifs-" title="Lien direct vers le titre">​</a></h2><ul><li>Comprendre les concepts : <code>Terraform core</code> &amp; <code>Terraform plugin</code></li><li>Connaitre les différents workflows de Terraform</li></ul><p><img loading="lazy" alt="img.png" src="/assets/images/terraform_orchestrateur-ad503d8eb2b76416b03d39b1917fe329.png" width="1005" height="516"></p><hr><h2 class="anchor anchorWithStickyNavbar_mojV" id="rappels--101-terraform">Rappels : 101 Terraform<a class="hash-link" href="#rappels--101-terraform" title="Lien direct vers le titre">​</a></h2><p>Terraform est un <strong>projet open source</strong> créé en <strong>2014</strong> par <a href="https://www.hashicorp.com/" target="_blank" rel="noopener noreferrer">Hashicorp</a>.</p><p>A l'écriture de ce blog, Terraform a :</p><ul><li><code>35K</code> ⭐️</li><li>Plus de <code>30k commits</code></li><li>Plus de <code>1600 contributeurs</code></li></ul><p><img loading="lazy" alt="img.png" src="/assets/images/terraform_github-76aedb9cfc1b6c8bf686ab6db814208d.png" width="1538" height="755">
<em><a href="https://github.com/hashicorp/terraform" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/terraform</a></em></p><p><strong>Ce qu'on peut faire avec Terraform :</strong></p><ul><li>Gérer des ressources d'infrastructure de plusieurs <strong>fournisseurs cloud</strong><ul><li>Créer une infrastructure réseau sur AWS</li><li>Déployer un cluster Kubernetes sur GCP</li></ul></li><li>Intéragir avec des <strong>produits d'infrastructure</strong><ul><li>Insérer des secrets dans un Vault </li><li>Déployer une application sur Heroku</li></ul></li><li>Configurer des <strong>services d’infrastructure</strong><ul><li>Créer un projet/groupe/utilisateur sur GitLab</li><li>Initialiser une base de données PostgreSQL (et ses utilisateurs)</li></ul></li></ul><hr><h2 class="anchor anchorWithStickyNavbar_mojV" id="les-concepts--terraform-core--terraform-plugin">Les concepts : Terraform Core &amp; Terraform Plugin<a class="hash-link" href="#les-concepts--terraform-core--terraform-plugin" title="Lien direct vers le titre">​</a></h2><p>Terraform a la capacité de se <strong>brancher</strong> avec de <strong>nombreux providers</strong> : <em>AWS, GCP, AZURE, ELASTIC...</em> <em>Mais le fonctionnement interne de terraform ne change pas entre 2 providers.</em></p><p>Pour cela, Terraform est composé de <strong>2 parties</strong> <em>(séparées par un contrat d'interface)</em> :</p><ul><li><p><strong>Terraform Core :</strong> Il s'agit du binaire Terraform qui communique avec les plugins pour gérer les ressources de l'infrastructure.
Il fournit une interface commune qui vous permet de tirer parti de nombreux fournisseurs
de Clouds, bases de données, services et solutions internes.</p></li><li><p><strong>Terraform Plugin :</strong> Il s'agit de binaires exécutables écrits en Go qui communiquent avec Terraform Core via une interface RPC. Chaque plugin expose une implémentation pour un service spécifique, tel que le fournisseur AWS ou le
fournisseur cloud-init. </p></li></ul><p><img loading="lazy" alt="img.png" src="/assets/images/terraform_core_plugin-82e1fa4e71a1a3b0541b55c32f2f0055.png" width="983" height="182"></p><p>Actuellement, Terraform ne supporte qu'un seul type de plugin appelé <strong><a href="https://developer.hashicorp.com/terraform/language/providers" target="_blank" rel="noopener noreferrer">Providers</a></strong>.<br>
<!-- -->Vous pouvez retrouver la liste en suivant le lien : <a href="https://registry.terraform.io/browse/providers" target="_blank" rel="noopener noreferrer">https://registry.terraform.io/browse/providers</a></p><div class="admonition admonition-tip alert alert--success"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Des plugins custom</h5></div><div class="admonition-content"><p>On peut également développer nos propres providers, Terraform propose un tutoriel : <a href="https://developer.hashicorp.com/terraform/tutorials/providers-plugin-framework/providers-plugin-framework-provider" target="_blank" rel="noopener noreferrer">Implement a Provider with the Terraform Plugin Framework</a></p></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="cinématique-générale-de-terraform">Cinématique générale de Terraform<a class="hash-link" href="#cinématique-générale-de-terraform" title="Lien direct vers le titre">​</a></h2><ol><li>Le développeur(se) 🧑🏻‍💻 <strong>développe</strong> le code Terraform</li><li>Le développeur(se) 🧑🏻‍💻 <strong>exécute</strong> des commandes Terraform</li><li>Terraform lit la <strong>configuration</strong> (code) ainsi que le <strong>fichier d'état</strong> **</li><li>Terraform crée un <strong>plan d'exécution</strong> : arbre de dépendances </li><li>Terraform communique avec les APIs du provider pour <strong>appliquer les changements</strong></li></ol><div class="admonition admonition-tip alert alert--success"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Fichier d'état</h5></div><div class="admonition-content"><p> ** <strong>Le fichier d'état</strong> est utilisé par Terraform pour faire correspondre les <strong>ressources du monde réel</strong> à votre <strong>configuration</strong> et conserver la trace des métadonnées.</p></div></div><p><img loading="lazy" alt="img.png" src="/assets/images/cinématique_terraform-9c69b0517494a55fb4cbbb7f3ebdea49.png" width="1609" height="562"></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="les-workflows-terraform">Les workflows Terraform<a class="hash-link" href="#les-workflows-terraform" title="Lien direct vers le titre">​</a></h2><p>Dans cette section nous allons voir les différents workflow Terraform : </p><ul><li><code>Workflow standard</code></li><li><code>Workflow lors d'une création d'infrastructure</code></li><li><code>Workflow lors d'une mise à jour d'infrastructure</code></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="workflow-standard">Workflow standard<a class="hash-link" href="#workflow-standard" title="Lien direct vers le titre">​</a></h3><hr><blockquote><p>Pour mettre en place notre <strong><a href="https://en.wikipedia.org/wiki/Working_directory" target="_blank" rel="noopener noreferrer">working directory</a></strong> il faut lancer la commande suivante :</p><ul><li><code>terraform init</code> </li></ul><p>⚠️ A chaque ajout de nouveau <a href="https://developer.hashicorp.com/terraform/language/modules/syntax" target="_blank" rel="noopener noreferrer">module</a> ou de provider il faudra, re-lancer cette commande.</p></blockquote><p>Une fois l'initialisation faite, le worklow standard pour développer du Terraform peut se résumer en <strong>3 étapes</strong> :</p><ol><li><code>terraform plan</code> : <strong>Afficher</strong> les changements requis par la configuration actuelle <em>(plan d'exécution)</em></li><li><code>terraform apply</code> : <strong>Appliquer</strong> le plan d'exécution sur l'infrastructure réelle.</li><li><code>terraform destroy</code> : <strong>Supprimer</strong> toute l'infrastructure crée avec Terraform </li></ol><blockquote><p>💡 Une fois qu'on a développé notre code Terraform, on peut le <strong>vérifier</strong> avec la commande :
<code>terraform validate</code> avant même de lancer la commande <code>terraform plan</code> pour avoir un feedback plus rapide.</p></blockquote><p><img loading="lazy" alt="img.png" src="/assets/images/standard_workflow-2756b41fb4686a55da2be880d9bf3b6f.png" width="1487" height="574"></p><p>Pour aller plus loin : <a href="https://developer.hashicorp.com/terraform/intro/core-workflow" target="_blank" rel="noopener noreferrer">The Core Terraform Workflow</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="workflow-lors-dune-création-dinfrastructure">Workflow lors d'une création d'infrastructure<a class="hash-link" href="#workflow-lors-dune-création-dinfrastructure" title="Lien direct vers le titre">​</a></h3><hr><p>Pour la première exécution de la commande <code>terraform apply</code> : </p><ul><li>Terraform crée <strong>l'infrastructure</strong> définie dans votre configuration (code terraform).</li><li>Terraform crée le <strong>fichier d'état</strong> : <code>tfstate</code>.  </li></ul><p><img loading="lazy" alt="img.png" src="/assets/images/workflow_creation-a8da6624918444e2c58e0710d9afb2f6.png" width="1560" height="446"></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="workflow-lors-dune-mise-à-jour-dinfrastructure">Workflow lors d'une mise à jour d'infrastructure<a class="hash-link" href="#workflow-lors-dune-mise-à-jour-dinfrastructure" title="Lien direct vers le titre">​</a></h3><hr><ol><li><code>Récupération du tfstate</code> :  récupérer le dernier état mis à jour par Terraform.</li><li><code>Récupération des états réels</code> : récupérer les éventuels changements d'infrastructure, externe à Terraform (modification à la main).</li><li><code>Application des différences</code> : créer un plan d'exécution et appliquer ces changements sur l'infrastructure réelle.</li><li><code>Mise à jour du tfstate</code> :  mettre à jour le tfstate avec l'infrastructure actuelle.</li></ol><p><img loading="lazy" alt="img.png" src="/assets/images/workflow_mise_a_jour-f6c8f96afda787a9bf4426ce7ac13ca6.png" width="1392" height="525"></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Lien direct vers le titre">​</a></h2><p>Pour aller plus loin, dans le prochain article nous expliquerons en détail le <strong>fichier d'état</strong>.    </p><p>Et pour ceux qui souhaitent creuser les notions <code>Terraform Core</code> et <code>Terraform Plugin</code> on vous recommande la vidéo :
<a href="https://www.youtube.com/watch?v=oNHABU-8xfs&amp;t=400s" target="_blank" rel="noopener noreferrer">Comment développer votre propre plugin Terraform ?</a></p>]]></content>
    </entry>
</feed>