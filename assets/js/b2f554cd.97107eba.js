"use strict";(self.webpackChunkdive_into=self.webpackChunkdive_into||[]).push([[477],{10:r=>{r.exports=JSON.parse('{"blogPosts":[{"id":"/2022/11/01/terraform-concepts-et-workflow","metadata":{"permalink":"/blog/2022/11/01/terraform-concepts-et-workflow","source":"@site/blog/2022-11-01-terraform-concepts-et-workflow.md","title":"Terraform - Concept & Workflow","description":"Objectifs :","date":"2022-11-11T00:00:00.000Z","formattedDate":"11 novembre 2022","tags":[],"readingTime":3.59,"truncated":true,"authors":[],"frontMatter":{"title":"Terraform - Concept & Workflow","date":"2022-11-11T00:00:00.000Z"}},"content":"## Objectifs :\\n\\n+ Comprendre les concepts : `Terraform core` & `Terraform plugin`\\n+ Connaitre les diff\xe9rents workflows de Terraform\\n\\n![img.png](static/terraform/terraform_orchestrateur.png)\\n\\n------------\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Rappels : 101 Terraform\\n\\nTerraform est un **projet open source** cr\xe9\xe9 en **2014** par [Hashicorp](https://www.hashicorp.com/).\\n\\nA l\'\xe9criture de ce blog, Terraform a :\\n+ `35K` \u2b50\ufe0f\\n+ Plus de `30k commits`\\n+ Plus de `1600 contributeurs`\\n\\n\\n![img.png](static/terraform/terraform_github.png)\\n_https://github.com/hashicorp/terraform_\\n\\n**Ce qu\'on peut faire avec Terraform :**\\n+ G\xe9rer des ressources d\'infrastructure de plusieurs **fournisseurs cloud**\\n  + Cr\xe9er une infrastructure r\xe9seau sur AWS\\n  + D\xe9ployer un cluster Kubernetes sur GCP\\n+ Int\xe9ragir avec des **produits d\'infrastructure**\\n  + Ins\xe9rer des secrets dans un Vault \\n  + D\xe9ployer une application sur Heroku\\n+ Configurer des **services d\u2019infrastructure**\\n  + Cr\xe9er un projet/groupe/utilisateur sur GitLab\\n  + Initialiser une base de donn\xe9es PostgreSQL (et ses utilisateurs)\\n\\n\\n\\n------------\\n\\n## Les concepts : Terraform Core & Terraform Plugin\\n\\nTerraform a la capacit\xe9 de se **brancher** avec de **nombreux providers** : _AWS, GCP, AZURE, ELASTIC..._ _Mais le fonctionnement interne de terraform ne change pas entre 2 providers._\\n\\nPour cela, Terraform est compos\xe9 de **2 parties** _(s\xe9par\xe9es par un contrat d\'interface)_ :\\n+ **Terraform Core :** Il s\'agit du binaire Terraform qui communique avec les plugins pour g\xe9rer les ressources de l\'infrastructure.\\nIl fournit une interface commune qui vous permet de tirer parti de nombreux fournisseurs\\nde Clouds, bases de donn\xe9es, services et solutions internes.\\n\\n+ **Terraform Plugin :** Il s\'agit de binaires ex\xe9cutables \xe9crits en Go qui communiquent avec Terraform Core via une interface RPC. Chaque plugin expose une impl\xe9mentation pour un service sp\xe9cifique, tel que le fournisseur AWS ou le \\nfournisseur cloud-init. \\n\\n![img.png](static/terraform/terraform_core_plugin.png)\\n\\nActuellement, Terraform ne supporte qu\'un seul type de plugin appel\xe9 **[Providers](https://developer.hashicorp.com/terraform/language/providers)**.  \\nVous pouvez retrouver la liste en suivant le lien : https://registry.terraform.io/browse/providers\\n\\n\\n:::tip Des plugins custom\\nOn peut \xe9galement d\xe9velopper nos propres providers, Terraform propose un tutoriel : [Implement a Provider with the Terraform Plugin Framework](https://developer.hashicorp.com/terraform/tutorials/providers-plugin-framework/providers-plugin-framework-provider)\\n:::\\n\\n## Cin\xe9matique g\xe9n\xe9rale de Terraform\\n\\n\\n1. Le d\xe9veloppeur(se) \ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb **d\xe9veloppe** le code Terraform\\n1. Le d\xe9veloppeur(se) \ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb **ex\xe9cute** des commandes Terraform\\n1. Terraform lit la **configuration** (code) ainsi que le **fichier d\'\xe9tat** **\\n1. Terraform cr\xe9e un **plan d\'ex\xe9cution** : arbre de d\xe9pendances \\n1. Terraform communique avec les APIs du provider pour **appliquer les changements**\\n\\n:::tip Fichier d\'\xe9tat\\n ** **Le fichier d\'\xe9tat** est utilis\xe9 par Terraform pour faire correspondre les **ressources du monde r\xe9el** \xe0 votre **configuration** et conserver la trace des m\xe9tadonn\xe9es.\\n:::\\n\\n![img.png](static/terraform/cin\xe9matique_terraform.png)\\n\\n\\n## Les workflows Terraform\\n\\nDans cette section nous allons voir les diff\xe9rents workflow Terraform : \\n+ `Workflow standard`\\n+ `Workflow lors d\'une cr\xe9ation d\'infrastructure`\\n+ `Workflow lors d\'une mise \xe0 jour d\'infrastructure`\\n\\n### Workflow standard\\n----------------------\\n\\n>Pour mettre en place notre **[working directory](https://en.wikipedia.org/wiki/Working_directory)** il faut lancer la commande suivante :\\n   + `terraform init` \\n>\\n> \u26a0\ufe0f A chaque ajout de nouveau [module](https://developer.hashicorp.com/terraform/language/modules/syntax) ou de provider il faudra, re-lancer cette commande.\\n\\nUne fois l\'initialisation faite, le worklow standard pour d\xe9velopper du Terraform peut se r\xe9sumer en **3 \xe9tapes** :\\n\\n1. `terraform plan` : **Afficher** les changements requis par la configuration actuelle _(plan d\'ex\xe9cution)_\\n1. `terraform apply` : **Appliquer** le plan d\'ex\xe9cution sur l\'infrastructure r\xe9elle.\\n1. `terraform destroy` : **Supprimer** toute l\'infrastructure cr\xe9e avec Terraform \\n\\n> \ud83d\udca1 Une fois qu\'on a d\xe9velopp\xe9 notre code Terraform, on peut le **v\xe9rifier** avec la commande : \\n`terraform validate` avant m\xeame de lancer la commande `terraform plan` pour avoir un feedback plus rapide.\\n\\n![img.png](static/terraform/standard_workflow.png)\\n\\nPour aller plus loin : [The Core Terraform Workflow](https://developer.hashicorp.com/terraform/intro/core-workflow)\\n\\n### Workflow lors d\'une cr\xe9ation d\'infrastructure\\n--------------------------------------------------\\n\\nPour la premi\xe8re ex\xe9cution de la commande `terraform apply` : \\n+ Terraform cr\xe9e **l\'infrastructure** d\xe9finie dans votre configuration (code terraform).\\n+ Terraform cr\xe9e le **fichier d\'\xe9tat** : `tfstate`.  \\n\\n![img.png](static/terraform/workflow_creation.png)\\n\\n\\n\\n\\n### Workflow lors d\'une mise \xe0 jour d\'infrastructure\\n----------------------------------------------------\\n\\n1. `R\xe9cup\xe9ration du tfstate` :  r\xe9cup\xe9rer le dernier \xe9tat mis \xe0 jour par Terraform.\\n2. `R\xe9cup\xe9ration des \xe9tats r\xe9els` : r\xe9cup\xe9rer les \xe9ventuels changements d\'infrastructure, externe \xe0 Terraform (modification \xe0 la main).\\n3. `Application des diff\xe9rences` : cr\xe9er un plan d\'ex\xe9cution et appliquer ces changements sur l\'infrastructure r\xe9elle.\\n4. `Mise \xe0 jour du tfstate` :  mettre \xe0 jour le tfstate avec l\'infrastructure actuelle.\\n\\n![img.png](static/terraform/workflow_mise_a_jour.png)\\n\\n\\n## Conclusion\\n\\nPour aller plus loin, dans le prochain article nous expliquerons en d\xe9tail le **fichier d\'\xe9tat**.    \\n\\nEt pour ceux qui souhaitent creuser les notions `Terraform Core` et `Terraform Plugin` on vous recommande la vid\xe9o :\\n[Comment d\xe9velopper votre propre plugin Terraform ?](https://www.youtube.com/watch?v=oNHABU-8xfs&t=400s)"}]}')}}]);