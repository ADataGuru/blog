"use strict";(self.webpackChunkdive_into=self.webpackChunkdive_into||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/02/23/documenter-sa-base","metadata":{"permalink":"/blog/2023/02/23/documenter-sa-base","source":"@site/blog/2023-02-23-documenter-sa-base.md","title":"Documenter sa base de donn\xe9e","description":"Objectifs :","date":"2023-02-23T00:00:00.000Z","formattedDate":"23 f\xe9vrier 2023","tags":[],"readingTime":6.205,"truncated":true,"authors":[],"frontMatter":{"title":"Documenter sa base de donn\xe9e","date":"2023-02-23T00:00:00.000Z"},"nextItem":{"title":"Loi de Conway","permalink":"/blog/2023/02/16/loi-de-conway"}},"content":"## Objectifs :\\n\\n+ Comprendre l\'importance de documenter sa bdd\\n+ Les commentaires sur les objets en base\\n+ Analyseur de m\xe9tadonn\xe9es pour documenter notre SGBD \\n+ Comment industrialiser sa documentation\\n\\n![img.png](static/doc-data/schemaspy_acceuil.png)\\n\\n\\n\x3c!--truncate--\x3e\\n\\n------------\\n\\n## Pourquoi\\n\\nLa **documentation** d\'une base de donn\xe9es est importante pour plusieurs raisons :\\n\\n1. `Comprendre la structure` : Elle aide les d\xe9veloppeurs et les administrateurs \xe0 comprendre la structure de la base,\\n                               les tables, les colonnes et les relations entre elles.\\n\\n2. `Collaboration` : Elle facilite la collaboration entre les d\xe9veloppeurs et les administrateurs en fournissant une \\n                     description claire et concise de la structure de la base.\\n\\n3. `Maintenance` : Elle aide \xe0 identifier et \xe0 corriger les erreurs dans la structure de la base, ce qui peut r\xe9duire \\n                   le temps de maintenance et les co\xfbts associ\xe9s.\\n\\n4. `Transparence` : Elle aide \xe0 garantir la transparence de la structure de la base et \xe0 fournir une vue d\'ensemble de \\n                    son fonctionnement pour les audits et les examens de s\xe9curit\xe9.\\n\\n5. `Mise \xe0 jour et \xe9volution` : La documentation peut aider \xe0 planifier les mises \xe0 jour et les \xe9volutions de la base \\n                                en fournissant une vue d\'ensemble de sa structure actuelle.\\n\\n------------\\n\\n## Les commentaires sur les objets de base de donn\xe9es\\n\\n\\nLes commentaires sur les objets de base de donn\xe9es sont des descriptions ou des annotations que l\'on peut ajouter \xe0 des \\n\xe9l\xe9ments tels que des tables, des colonnes, des vues, des proc\xe9dures stock\xe9es, etc\u2026   \\nIls fournissent des informations suppl\xe9mentaires sur l\'objet, telles que son but, ses limites, \\nses exigences, etc. Ils peuvent \xe9galement aider \xe0 la compr\xe9hension du code, \xe0 la documentation et \xe0 la collaboration.   \\n\\nLa mani\xe8re de cr\xe9er et de g\xe9rer des commentaires sur les objets de base de donn\xe9es d\xe9pend du syst\xe8me de gestion de base \\nde donn\xe9es (SGBD) utilis\xe9. Par exemple, pour ajouter un commentaire \xe0 une table dans MySQL, vous pouvez utiliser la \\ncommande ALTER TABLE :\\n\\n```sql\\nALTER TABLE table_name COMMENT \'description de la table\';\\n```\\n\\nDans Oracle et Postgres, vous pouvez utiliser la commande COMMENT suivie du nom de l\'objet et du commentaire souhait\xe9:\\n\\n```sql\\nCOMMENT ON TABLE table_name IS \'description de la table\';\\n```\\n\\nLes commentaires sur les objets de base de donn\xe9es peuvent \xeatre consult\xe9s \xe0 l\'aide de commandes sp\xe9cifiques pour chaque\\nSGBD ou \xe0 l\'aide d\'outils comme : `phpMyAdmin`, `Oracle SQL Developer`, \\n`Microsoft SQL Server Management Studio`, etc.\\n\\n\\n## Analyseur de m\xe9tadonn\xe9es\\n\\nUtiliser un analyseur de m\xe9tadonn\xe9es pour documenter notre SGBD peut \xeatre tr\xe8s b\xe9n\xe9fique pour plusieurs raisons :\\n\\n1. `Documentation exhaustive` : Il permet d\'extraire des informations sur la structure, les relations,  types de donn\xe9es, index et contraintes de la base de donn\xe9es. \\nOn peut utiliser ces informations, pour g\xe9n\xe9rer une documentation qui fournit une image compl\xe8te de notre sch\xe9ma.\\n \\n2. `Gain de temps` : La documentation manuelle d\'une base de donn\xe9es peut \xeatre une t\xe2che **chronophage**, en particulier \\npour les bases de donn\xe9es **volumineuses** et **complexes**. L\'utilisation d\'un analyseur de m\xe9tadonn\xe9es peut \\npermettre de gagner du temps et des efforts en **g\xe9n\xe9rant automatiquement** la documentation.\\n\\n3. `Pr\xe9cision` : Il permet d\'extraire des informations pr\xe9cises et fiables sur la base de donn\xe9es.\\n\\n4. `Standardisation` : Son utilisation garantit que la documentation est normalis\xe9e et \\ncoh\xe9rente sur l\'ensemble de la base de donn\xe9es, ce qui la rend plus facile \xe0 comprendre et \xe0 maintenir.\\n\\n5. `Communication` : La documentation g\xe9n\xe9r\xe9e par un analyseur de m\xe9tadonn\xe9es peut \xeatre utilis\xe9e pour communiquer la \\nstructure et le contenu de la base de donn\xe9es aux parties prenantes, notamment les d\xe9veloppeurs, les testeurs, les analystes m\xe9tier et les autres membres de l\'\xe9quipe.\\n\\nDans l\'ensemble, l\'utilisation d\'un analyseur de m\xe9tadonn\xe9es de notre SGBD peut nous aider \xe0 mieux comprendre, g\xe9rer et \\ncommuniquer les informations sur nos bases de donn\xe9es, ce qui peut conduire \xe0 une am\xe9lioration de l\'efficacit\xe9, \\nde la pr\xe9cision et de la productivit\xe9.\\n\\n\\n## Comment industrialiser sa documentation\\n\\nDans cette section, nous allons explorer comment industrialiser la g\xe9n\xe9ration de documentation sur vos SGBD en utilisant `SchemaSpy` comme analyseur de m\xe9tadonn\xe9es et `GitlabCI` comme outil de CI.\\n\\nUne fois que vous avez install\xe9 `SchemaSpy` en local, vous pouvez g\xe9n\xe9rer de la documentation sur vos SGBDs.\\nLa documentation g\xe9n\xe9r\xe9e sera sous forme de fichiers statiques `HTML`, `CSS` et `JS`.\\n\\n> Suivre le guide d\'installation : https://schemaspy.readthedocs.io/en/latest/installation.html\\n\\nDans dans cette section, nous nous concentrerons sur la fa\xe7on d\'industrialiser cette documentation dans une `CI` \ud83d\ude80. \\n\\n**Avant de commencer, il est important de se poser les questions suivantes :**\\n\\n+ Sur quel environnement voulez-vous g\xe9n\xe9rer votre documentation : `Dev`, `Staging`, `Prod` ?\\n+ Comment SchemaSpy acc\xe8de-t-il aux m\xe9tadonn\xe9es de votre base de donn\xe9es cible ? `En direct` ?\\n+ Sur quel service d\'h\xe9bergement souhaitez-vous d\xe9ployer votre documentation ? `Gitlab/Github Pages`, `Netlify`, `AWS S3` ?\\n+ Voulez-vous versionner cette documentation ? Via `Git`, sauvegarde d\'`artefacts` dans une CI...?\\n\\n**Dans cet exemple, nous allons industrialiser la g\xe9n\xe9ration de documentation avec le contexte suivant :**\\n\\n+ Pas d\'environnement sp\xe9cifique\\n+ Simulation de restauration gr\xe2ce \xe0 un script charg\xe9 au d\xe9marrage d\'un service postgres dans notre CI\\n+ Connexion de SchemaSpy au service Postgres et g\xe9n\xe9ration de la documentation\\n+ Exposition de la doc\' sur Gitlab Pages.\\n+ Sauvegarde des documentations sur les artifacts de gitlab, les anciennes versions sont disponibles sur ce service\\n\\nPassons au code, tout d\'abord il va nous falloir le script sql qui va nous permettre de simuler la restauration d\'une \\nbase de donn\xe9es : (fichier qu\'on nommera `initdb/init-db.sql`)\\n\\n```sql\\nCREATE TYPE sexe AS ENUM (\'AUTRE\', \'FEMME\', \'HOMME\');\\nCREATE TABLE ville\\n(\\n    id        VARCHAR UNIQUE PRIMARY KEY,\\n    nom       VARCHAR NOT NULL,\\n    longitude NUMERIC NOT NULL,\\n    latitude  NUMERIC NOT NULL,\\n    UNIQUE (nom, latitude)\\n);\\n\\nCREATE TABLE utilisateur\\n(\\n    id       VARCHAR UNIQUE PRIMARY KEY,\\n    prenom   VARCHAR                 NOT NULL,\\n    nom      VARCHAR                 NOT NULL,\\n    age      VARCHAR                 NOT NULL,\\n    ville_id VARCHAR                 NOT NULL REFERENCES ville (id),\\n    sexe     sexe NOT NULL\\n);\\n\\nCOMMENT ON COLUMN utilisateur.prenom is \'Est le prenom de l utilisateur\';\\nCOMMENT ON COLUMN utilisateur.nom is \'Est le nom de naissance de l utilisateur\';\\nCOMMENT ON COLUMN utilisateur.age is \'Est l age de l utilisateur\';\\nCOMMENT ON COLUMN utilisateur.ville_id is \'Est la cl\xe9 primaire qui fait r\xe9f\xe9rence \xe0 la ville o\xf9 l utilisateur habite\';\\nCOMMENT ON COLUMN utilisateur.sexe is \'Est le sexe de l utilisateur de type sexe\';\\n\\nINSERT INTO ville (id, nom, longitude, latitude)\\nVALUES (\'c4e5fcc2-ab73-11ed-afa1-0242ac120002\', \'Paris\', 2.333333, 48.86);\\n\\nINSERT INTO utilisateur (id, prenom, nom, age, ville_id, sexe)\\nVALUES (\'f43692ad-9f11-4ce2-8d21-078e79ea21a3\', \'Lo\xefc\', \'cam\', 28, \'c4e5fcc2-ab73-11ed-afa1-0242ac120002\', \'HOMME\');\\n```\\n\\nUne fois le fichier sql \xe9crit et mis dans un dossier au niveau de la racine \xe0 l\'emplacement : `initdb/init-db.sql`\\nNous pouvons passer \xe0 l\'\xe9criture de notre pipeline : \\n\\n```yaml\\nstages:\\n    - Documentation\\n\\npages:\\n    image: openjdk:8-jdk-alpine\\n    services:\\n        - name: postgres:14.0\\n          alias: postgres\\n    variables:\\n        POSTGRES_DB: dataguru\\n        POSTGRES_USER: postgres\\n        POSTGRES_PASSWORD: $CI_POSTGRES_PASSWORD\\n    stage: Documentation\\n    script:\\n        - apk add postgresql-client\\n        - apk update && apk add graphviz ttf-dejavu wget\\n        - wget https://github.com/schemaspy/schemaspy/releases/download/v6.1.0/schemaspy-6.1.0.jar -P /schemaspy\\n        - export PGPASSWORD=$POSTGRES_PASSWORD\\n        - psql -h \\"postgres\\" -U \\"$POSTGRES_USER\\" -d \\"$POSTGRES_DB\\" -f ./initdb/init-db.sql\\n        - wget https://jdbc.postgresql.org/download/postgresql-42.3.0.jar -P /drivers_inc/\\n        - java -jar /schemaspy/schemaspy-6.1.0.jar -t pgsql -db \\"$POSTGRES_DB\\" -host \\"postgres\\" -port 5432 -s public -u \\"$POSTGRES_USER\\" -p \\"$POSTGRES_PASSWORD\\" -o ./public -dp /drivers_inc/postgresql-42.3.0.jar\\n    artifacts:\\n        expire_in: \'2 weeks\'\\n        paths:\\n          - public/\\n```\\n\\n> :warning: La pipeline actuelle n\'est pas optimis\xe9e et ne suit pas les bonnes pratiques.\\n> Une solution possible serait de cr\xe9er une image Docker qui contiendrait toutes les d\xe9pendances n\xe9cessaires pour g\xe9n\xe9rer la documentation. Cette approche permettrait de simplifier et d\'am\xe9liorer la rapidit\xe9 de la pipeline. \\n\\nWorkflow d\'ex\xe9cution de la pipeline : \\n\\n![img.png](static/doc-data/pipeline_gitlab.png)\\n\\nEt votre documentation sera accessible : `https://username.gitlab.io/repo_name/`\\n\\n![img.png](static/doc-data/schemaspy_relation.png)"},{"id":"/2023/02/16/loi-de-conway","metadata":{"permalink":"/blog/2023/02/16/loi-de-conway","source":"@site/blog/2023-02-16-loi-de-conway.mdx","title":"Loi de Conway","description":"En 1968, Melvin Conway a publi\xe9 un article intitul\xe9 \\"How Do Committees Invent ?\\"  [1]  dans lequel il examine la relation entre la structure d\'une organisation et la conception d\'un syst\xe8me. Il est devenu c\xe9l\xe8bre pour avoir formul\xe9 ce qui est maintenant connu sous le nom de loi de Conway :","date":"2023-02-18T00:00:00.000Z","formattedDate":"18 f\xe9vrier 2023","tags":[],"readingTime":2.8,"truncated":true,"authors":[],"frontMatter":{"title":"Loi de Conway","date":"2023-02-18T00:00:00.000Z"},"prevItem":{"title":"Documenter sa base de donn\xe9e","permalink":"/blog/2023/02/23/documenter-sa-base"},"nextItem":{"title":"Terraform - Concept & Workflow","permalink":"/blog/2022/11/01/terraform-concepts-et-workflow"}},"content":"En 1968, Melvin Conway a publi\xe9 un article intitul\xe9 **\\"How Do Committees Invent ?\\"**  [[1]](https://www.melconway.com/Home/Committees_Paper.html)  dans lequel il examine la relation entre la structure d\'une organisation et la conception d\'un syst\xe8me. Il est devenu c\xe9l\xe8bre pour avoir formul\xe9 ce qui est maintenant connu sous le nom de **loi de Conway** :\\n\\n\\n>  **Toute organisation qui con\xe7oit un syst\xe8me, au sens large, concevra une structure qui sera la copie de la structure de communication de l\u2019organisation.**\\n\\n\\n![img.png](static/conway/conway.png)\\n\\n**Conway\'s Law** Martin Fowler [[2]](https://martinfowler.com/bliki/ConwaysLaw.html)\\n\\n\\n\x3c!--truncate--\x3e\\n\\n\\nPendant la conception d\'un syst\xe8me, son architecture a de fortes chances de ressembler \xe0 l\u2019organisation de l\'\xe9quipe qui l\'a con\xe7ue.\\nSi l\'on consid\xe8re trois \xe9quipes travaillant sur le d\xe9veloppement d\'une m\xeame solution, il est fort probable que la base de code soit divis\xe9e en trois sous-parties distinctes.\\n\\n\\n\\nAlan MacCormack, John Rusnak, et Carliss Baldwin essaient de prouver cette corr\xe9lation dans leur recherche intitul\xe9e\\n** Exploring the Structure of Complex Software Designs: An Empirical Study of Open Source and Proprietary Code** [[3]](https://www.researchgate.net/publication/220534289_Exploring_the_Structure_of_Complex_Software_Designs_An_Empirical_Study_of_Open_Source_and_Proprietary_Code).\\n\\n\\nEn utilisant le **DSM (Design Structure Matrix)** [[4]](https://www.idp-innovation.com/design-structure-matrix-dsm-modeliser-la-complexite-en-developpement-de-produits/)\\n, un outil qui vise \xe0 mod\xe9liser la complexit\xe9 d\'un syst\xe8me en examinant ses d\xe9pendances.\\n\\n**Exemple d\u2019un matrice DSM**\\n\\n![img.png](static/conway/dsm.png)\\n\\n\\n\\nIls analysent la base de code de `Linux` et `Mozilla` et obtienne les r\xe9sultats suivants :\\n\\n+ Le projet Linux, qui est un projet **open source** con\xe7u pour la collaboration **d\xe9centralis\xe9e** entre des personnes du monde entier, a une **architecture modulaire**.\\n\\n+ Le navigateur Netscape, avant son passage en open source sous le nom de Mozilla et qui \xe9tait g\xe9r\xe9 de **mani\xe8re propri\xe9taire** par une \xe9quipe interne, avait une **architecture fortement coupl\xe9e**.\\n\\n+ Apr\xe8s son passage en open source, Mozilla a subi une refactorisation globale pour devenir plus modulaire et moins coupl\xe9 que Linux !\\n\\nLeur \xe9tude met en lumi\xe8re l\'influence de l\'organisation des \xe9quipes sur la modularit\xe9 du code. La collaboration distribu\xe9e inh\xe9rente \xe0 l\'open source encourage la conception d\'une architecture de code plus modulaire, avec une faible interd\xe9pendance entre les diff\xe9rents \xe9l\xe9ments.\\n\\nIl est crucial de consid\xe9rer la structure de l\'\xe9quipe lors de la conception d\'une architecture. Ignorer la structure organisationnelle peut mener \xe0 des divergences significatives par rapport au design initial.\\n\\n## Conway invers\xe9\\n\\nDans son talk \\"Microservices and the Inverse Conway Manoeuvre\\", James Lewis pr\xe9sente une approche appel\xe9e  \\"Conway invers\xe9\\"  qui consiste \xe0 organiser l\'\xe9quipe de mani\xe8re \xe0 atteindre l\'architecture d\xe9sir\xe9e.\\n\\n<div>\\n    <iframe width=\\"100%\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/CsZDGlz7O5w\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n</div>\\n\\n------------\\n\\n\\nUne technique largement employ\xe9e par les **entreprises performantes** actuelles, qui augmente les chances de d\xe9velopper des **solutions efficaces** et maintenables de mani\xe8re naturelle.\\n\\nPour cr\xe9er une architecture modulaire compos\xe9e de plusieurs domaines distincts, il est pr\xe9f\xe9rable de former une \xe9quipe pour chaque domaine sp\xe9cifique. Cela permettra de progresser naturellement vers l\'objectif final envisag\xe9.\\n\\n## Conclusion\\n\\nDe nombreuses organisations continuent de rencontrer des difficult\xe9s pour mettre en place des architectures innovantes, souvent pour de mauvaises raisons.\\n\\nEn effet, travailler sur le cloud tout en conservant une organisation cloisonn\xe9e ne va pas forc\xe9ment vous aider \xe0 r\xe9duire votre lead time.\\n\\nLa loi de Conway nous rappelle une v\xe9rit\xe9 simple: si la structure de l\'organisation ne correspond pas \xe0 l\'architecture souhait\xe9e, l\'adoption des derni\xe8res tendances technologiques ne suffira pour atteindre les r\xe9sultats escompt\xe9s.\\n\\nEt comme le dit si bien  **Ryth Malan** :\\n\\n> Si l\'architecture du syst\xe8me et l\'architecture de l\'organisation sont en d\xe9saccord, l\'architecture de l\'organisation l\'emporte."},{"id":"/2022/11/01/terraform-concepts-et-workflow","metadata":{"permalink":"/blog/2022/11/01/terraform-concepts-et-workflow","source":"@site/blog/2022-11-01-terraform-concepts-et-workflow.md","title":"Terraform - Concept & Workflow","description":"Objectifs :","date":"2022-11-11T00:00:00.000Z","formattedDate":"11 novembre 2022","tags":[],"readingTime":3.59,"truncated":true,"authors":[],"frontMatter":{"title":"Terraform - Concept & Workflow","date":"2022-11-11T00:00:00.000Z"},"prevItem":{"title":"Loi de Conway","permalink":"/blog/2023/02/16/loi-de-conway"}},"content":"## Objectifs :\\n\\n+ Comprendre les concepts : `Terraform core` & `Terraform plugin`\\n+ Connaitre les diff\xe9rents workflows de Terraform\\n\\n![img.png](static/terraform/terraform_orchestrateur.png)\\n\\n------------\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Rappels : 101 Terraform\\n\\nTerraform est un **projet open source** cr\xe9\xe9 en **2014** par [Hashicorp](https://www.hashicorp.com/).\\n\\nA l\'\xe9criture de ce blog, Terraform a :\\n+ `35K` \u2b50\ufe0f\\n+ Plus de `30k commits`\\n+ Plus de `1600 contributeurs`\\n\\n\\n![img.png](static/terraform/terraform_github.png)\\n_https://github.com/hashicorp/terraform_\\n\\n**Ce qu\'on peut faire avec Terraform :**\\n+ G\xe9rer des ressources d\'infrastructure de plusieurs **fournisseurs cloud**\\n  + Cr\xe9er une infrastructure r\xe9seau sur AWS\\n  + D\xe9ployer un cluster Kubernetes sur GCP\\n+ Int\xe9ragir avec des **produits d\'infrastructure**\\n  + Ins\xe9rer des secrets dans un Vault \\n  + D\xe9ployer une application sur Heroku\\n+ Configurer des **services d\u2019infrastructure**\\n  + Cr\xe9er un projet/groupe/utilisateur sur GitLab\\n  + Initialiser une base de donn\xe9es PostgreSQL (et ses utilisateurs)\\n\\n\\n\\n------------\\n\\n## Les concepts : Terraform Core & Terraform Plugin\\n\\nTerraform a la capacit\xe9 de se **brancher** avec de **nombreux providers** : _AWS, GCP, AZURE, ELASTIC..._ _Mais le fonctionnement interne de terraform ne change pas entre 2 providers._\\n\\nPour cela, Terraform est compos\xe9 de **2 parties** _(s\xe9par\xe9es par un contrat d\'interface)_ :\\n+ **Terraform Core :** Il s\'agit du binaire Terraform qui communique avec les plugins pour g\xe9rer les ressources de l\'infrastructure.\\nIl fournit une interface commune qui vous permet de tirer parti de nombreux fournisseurs\\nde Clouds, bases de donn\xe9es, services et solutions internes.\\n\\n+ **Terraform Plugin :** Il s\'agit de binaires ex\xe9cutables \xe9crits en Go qui communiquent avec Terraform Core via une interface RPC. Chaque plugin expose une impl\xe9mentation pour un service sp\xe9cifique, tel que le fournisseur AWS ou le \\nfournisseur cloud-init. \\n\\n![img.png](static/terraform/terraform_core_plugin.png)\\n\\nActuellement, Terraform ne supporte qu\'un seul type de plugin appel\xe9 **[Providers](https://developer.hashicorp.com/terraform/language/providers)**.  \\nVous pouvez retrouver la liste en suivant le lien : https://registry.terraform.io/browse/providers\\n\\n\\n:::tip Des plugins custom\\nOn peut \xe9galement d\xe9velopper nos propres providers, Terraform propose un tutoriel : [Implement a Provider with the Terraform Plugin Framework](https://developer.hashicorp.com/terraform/tutorials/providers-plugin-framework/providers-plugin-framework-provider)\\n:::\\n\\n## Cin\xe9matique g\xe9n\xe9rale de Terraform\\n\\n\\n1. Le d\xe9veloppeur(se) \ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb **d\xe9veloppe** le code Terraform\\n1. Le d\xe9veloppeur(se) \ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb **ex\xe9cute** des commandes Terraform\\n1. Terraform lit la **configuration** (code) ainsi que le **fichier d\'\xe9tat** **\\n1. Terraform cr\xe9e un **plan d\'ex\xe9cution** : arbre de d\xe9pendances \\n1. Terraform communique avec les APIs du provider pour **appliquer les changements**\\n\\n:::tip Fichier d\'\xe9tat\\n ** **Le fichier d\'\xe9tat** est utilis\xe9 par Terraform pour faire correspondre les **ressources du monde r\xe9el** \xe0 votre **configuration** et conserver la trace des m\xe9tadonn\xe9es.\\n:::\\n\\n![img.png](static/terraform/cin\xe9matique_terraform.png)\\n\\n\\n## Les workflows Terraform\\n\\nDans cette section nous allons voir les diff\xe9rents workflow Terraform : \\n+ `Workflow standard`\\n+ `Workflow lors d\'une cr\xe9ation d\'infrastructure`\\n+ `Workflow lors d\'une mise \xe0 jour d\'infrastructure`\\n\\n### Workflow standard\\n----------------------\\n\\n>Pour mettre en place notre **[working directory](https://en.wikipedia.org/wiki/Working_directory)** il faut lancer la commande suivante :\\n   + `terraform init` \\n>\\n> \u26a0\ufe0f A chaque ajout de nouveau [module](https://developer.hashicorp.com/terraform/language/modules/syntax) ou de provider il faudra, re-lancer cette commande.\\n\\nUne fois l\'initialisation faite, le worklow standard pour d\xe9velopper du Terraform peut se r\xe9sumer en **3 \xe9tapes** :\\n\\n1. `terraform plan` : **Afficher** les changements requis par la configuration actuelle _(plan d\'ex\xe9cution)_\\n1. `terraform apply` : **Appliquer** le plan d\'ex\xe9cution sur l\'infrastructure r\xe9elle.\\n1. `terraform destroy` : **Supprimer** toute l\'infrastructure cr\xe9e avec Terraform \\n\\n> \ud83d\udca1 Une fois qu\'on a d\xe9velopp\xe9 notre code Terraform, on peut le **v\xe9rifier** avec la commande : \\n`terraform validate` avant m\xeame de lancer la commande `terraform plan` pour avoir un feedback plus rapide.\\n\\n![img.png](static/terraform/standard_workflow.png)\\n\\nPour aller plus loin : [The Core Terraform Workflow](https://developer.hashicorp.com/terraform/intro/core-workflow)\\n\\n### Workflow lors d\'une cr\xe9ation d\'infrastructure\\n--------------------------------------------------\\n\\nPour la premi\xe8re ex\xe9cution de la commande `terraform apply` : \\n+ Terraform cr\xe9e **l\'infrastructure** d\xe9finie dans votre configuration (code terraform).\\n+ Terraform cr\xe9e le **fichier d\'\xe9tat** : `tfstate`.  \\n\\n![img.png](static/terraform/workflow_creation.png)\\n\\n\\n\\n\\n### Workflow lors d\'une mise \xe0 jour d\'infrastructure\\n----------------------------------------------------\\n\\n1. `R\xe9cup\xe9ration du tfstate` :  r\xe9cup\xe9rer le dernier \xe9tat mis \xe0 jour par Terraform.\\n2. `R\xe9cup\xe9ration des \xe9tats r\xe9els` : r\xe9cup\xe9rer les \xe9ventuels changements d\'infrastructure, externe \xe0 Terraform (modification \xe0 la main).\\n3. `Application des diff\xe9rences` : cr\xe9er un plan d\'ex\xe9cution et appliquer ces changements sur l\'infrastructure r\xe9elle.\\n4. `Mise \xe0 jour du tfstate` :  mettre \xe0 jour le tfstate avec l\'infrastructure actuelle.\\n\\n![img.png](static/terraform/workflow_mise_a_jour.png)\\n\\n\\n## Conclusion\\n\\nPour aller plus loin, dans le prochain article nous expliquerons en d\xe9tail le **fichier d\'\xe9tat**.    \\n\\nEt pour ceux qui souhaitent creuser les notions `Terraform Core` et `Terraform Plugin` on vous recommande la vid\xe9o :\\n[Comment d\xe9velopper votre propre plugin Terraform ?](https://www.youtube.com/watch?v=oNHABU-8xfs&t=400s)"}]}')}}]);